version: "3.4"
services:
  front:
    container_name: skinet-front
    image: funbiscuit/skinet-ui
    ports:
      - "8443:443"
      - "443:443"
      - "80:80"
    networks:
      - local
    volumes:
      - "./certs:/etc/ssl/certs/nginx"
      - "./certs:/usr/share/nginx/html/assets/config"

  api:
    container_name: skinet-api
    image: funbiscuit/skinet-api
    #    ports:
    #      - "5001:5001"
    environment:
      spring.datasource.url: "jdbc:postgresql://postgres:5432/skinet?currentSchema=public"
      spring.redis.host: "redis"
      server.ssl.key-store: /etc/certs/ssl.p12
      server.ssl.key-store-password: password
      app.root-url: "/"
      app.jwt.issuer: https://localhost
      app.stripe.publishable-key: pk_test_YOUR_KEY
      app.stripe.secret-key: sk_test_YOUR_KEY
      app.stripe.webhook-key: whsec_YOUR_KEY
    networks:
      - local
    volumes:
      - "./certs:/etc/certs"

  postgres:
    container_name: skinet-db
    image: postgres:alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: skinet
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    #    ports:
    #      - "5432:5432"
    restart: unless-stopped
    networks:
      - local

  redis:
    container_name: redis-db
    image: redis:alpine
    command: redis-server --save 20 1 --loglevel warning
    volumes:
      - redis:/data
    #    ports:
    #      - 6379:6379
    restart: unless-stopped
    networks:
      - local

volumes:
  postgres:
  redis:

networks:
  local:
